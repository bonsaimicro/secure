// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import database "secure/database"
import mock "github.com/stretchr/testify/mock"

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: _a0
func (_m *Datastore) AddUser(_a0 *database.User) (*database.User, error) {
	ret := _m.Called(_a0)

	var r0 *database.User
	if rf, ok := ret.Get(0).(func(*database.User) *database.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*database.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Datastore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: email, password
func (_m *Datastore) FindUser(email string, password string) (*database.User, error) {
	ret := _m.Called(email, password)

	var r0 *database.User
	if rf, ok := ret.Get(0).(func(string, string) *database.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
